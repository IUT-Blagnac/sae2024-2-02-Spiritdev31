import unittest

class AlgoTest(unittest.TestCase):

    def testRLE(self):
        self.assertEqual(RLE(""), "")
        self.assertEqual(RLE("abc"), "1a1b1c")
        self.assertEqual(RLE("abbccc"), "1a2b3c")
        self.assertEqual(RLE("aaabaa"), "3a1b2a")
        self.assertEqual(RLE("aAa"), "1a1A1a")

    def testRLERecursif(self):
        try:
            self.assertEqual(RLE("", 1), "")
            self.assertEqual(RLE("", 3), "")
            
            self.assertEqual(RLE("abc", 1), "1a1b1c")
            self.assertEqual(RLE("abbccc", 1), "1a2b3c")
            self.assertEqual(RLE("aaabaa", 1), "3a1b2a")
            self.assertEqual(RLE("aAa", 1), "1a1A1a")

            self.assertEqual(RLE("abc", 2), "111a111b111c")
            self.assertEqual(RLE("abc", 3), "311a311b311c")

            saeIte20 = "1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211S1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211 1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211l1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
            self.assertEqual(RLE("SAE Algo", 20), saeIte20)
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def testUnRLE(self):
        try:
            self.assertEqual(unRLE(""), "")
            self.assertEqual(unRLE("1a1b1c"), "abc")
            self.assertEqual(unRLE("1a2b3c"), "abbccc")
            self.assertEqual(unRLE("3a1b2a"), "aaabaa")
            self.assertEqual(unRLE("1a1A1a"), "aAa")
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def testUnRLERecursif(self):
        try:
            self.assertEqual(unRLE("", 1), "")
            self.assertEqual(unRLE("", 3), "")
            
            self.assertEqual(unRLE("1a1b1c", 1), "abc")
            self.assertEqual(unRLE("1a2b3c", 1), "abbccc")
            self.assertEqual(unRLE("3a1b2a", 1), "aaabaa")
            self.assertEqual(unRLE("1a1A1a", 1), "aAa")

            self.assertEqual(unRLE("111a111b111c", 2), "abc")
            self.assertEqual(unRLE("311a311b311c", 3), "abc")
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def testSupp(self):
        try:
            self.assertEqual(unRLE(RLE("wwwwwwwwwwww")), "wwwwwwwwwwww")
            self.assertEqual(unRLE(RLE("aaaaaaaaaaa")), "aaaaaaaaaaa")
            self.assertEqual(unRLE(RLE("bbbbbbbbbbb")), "bbbbbbbbbbb")
            self.assertEqual(unRLE(RLE("ccccccccccc")), "ccccccccccc")
            self.assertEqual(unRLE(RLE("ddddddddddd")), "ddddddddddd")
            self.assertEqual(unRLE(RLE("eeeeeeeeeee")), "eeeeeeeeeee")
            self.assertEqual(unRLE(RLE("fffffffffff")), "fffffffffff")
            self.assertEqual(unRLE(RLE("ggggggggggg")), "ggggggggggg")
            self.assertEqual(unRLE(RLE("hhhhhhhhhhh")), "hhhhhhhhhhh")
            RLE("SAE", 60)
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

if __name__ == "__main__":
    unittest.main()
